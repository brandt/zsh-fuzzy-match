# functions that handle user key presses

_fuzzy-match-update-line-cursor() {
	integer selected_start_idx selected_end_idx selected_line=$state[selected_line]\
	 	buffer_len=${#BUFFER}
	local hi_selected=$state[hi_selected] nl=$state[nl]
	# highlight the selected line
	# start index to highlight (zshparam(1) for help on the subscript
	# syntax)
	selected_start_idx=${POSTDISPLAY[(n:((selected_line)):i)$nl]}
	(( selected_start_idx += buffer_len ))
	# end index
	selected_end_idx=${POSTDISPLAY[(n:((selected_line + 1)):i)$nl]}
	(( selected_end_idx += buffer_len ))
	state[last_selected_line]=$state[selected_line]
	region_highlight[1]="$selected_start_idx $selected_end_idx $hi_selected"
	zle -Rc
}

_fuzzy-match-go-up() {
	if (( state[selected_line] > 1)); then
		(( state[selected_line]-- ))
		_fuzzy-match-update-line-cursor
	fi
}

_fuzzy-match-go-down() {
	if (( state[selected_line] < state[lines] )); then
		(( state[selected_line]++ ))
		_fuzzy-match-update-line-cursor
	fi
}

_fuzzy-match-self-insert() {
	LBUFFER+=${KEYS[-1]}
	print -p -N 'RESTART'
	_fuzzy-match-update-line-cursor
}

_fuzzy-match-backward-delete-char() {
	if (( $#LBUFFER )); then
		LBUFFER=${LBUFFER[1,-2]}
		print -p -N 'RESTART'
		_fuzzy-match-update-line-cursor
	fi
}

_fuzzy-match-delete-char() {
	if (( $#RBUFFER )); then
		RBUFFER=${RBUFFER[2,-1]}
		print -p -N 'RESTART'
		_fuzzy-match-update-line-cursor
	fi
}


# zle -N _fuzzy-match-update-line-cursor
# zle -N _fuzzy-match-go-up
# zle -N _fuzzy-match-go-down
# zle -N _fuzzy-match-self-insert

unfunction fuzzy-match-key-handlers
